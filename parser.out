Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    mayorque
    menorque
    resstruct

Grammar

Rule 0     S' -> INIT
Rule 1     INIT -> INSTRUCCIONES
Rule 2     INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION
Rule 3     INSTRUCCIONES -> INSTRUCCION
Rule 4     INSTRUCCION -> PRINT puntycom
Rule 5     INSTRUCCION -> DECLARAR puntycom
Rule 6     INSTRUCCION -> ASIGNAR puntycom
Rule 7     INSTRUCCION -> INSTFUNC
Rule 8     INSTRUCCION -> LLAMARFUNC puntycom
Rule 9     PRINT -> resprint not pariz EXPRESION parder
Rule 10    PRINT -> resprint not pariz EXPRESION com LISTAEXP parder
Rule 11    DECLARAR -> reslet resmut id dospunt TIPOVAL igual EXPRESION
Rule 12    DECLARAR -> reslet resmut id igual EXPRESION
Rule 13    DECLARAR -> reslet id dospunt TIPOVAL igual EXPRESION
Rule 14    DECLARAR -> reslet id igual EXPRESION
Rule 15    ASIGNAR -> id igual EXPRESION
Rule 16    INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder
Rule 17    LLAMARFUNC -> id pariz parder
Rule 18    BLOQUE -> INSTRUCCIONES
Rule 19    LISTAEXP -> LISTAEXP com EXPRESION
Rule 20    LISTAEXP -> EXPRESION
Rule 21    TIPOVAL -> resi64
Rule 22    TIPOVAL -> resf64
Rule 23    TIPOVAL -> resbool
Rule 24    TIPOVAL -> reschar
Rule 25    TIPOVAL -> resString
Rule 26    TIPOVAL -> resStr
Rule 27    EXPRESION -> EXPRESION mas EXPRESION
Rule 28    EXPRESION -> EXPRESION menos EXPRESION
Rule 29    EXPRESION -> EXPRESION por EXPRESION
Rule 30    EXPRESION -> EXPRESION modulo EXPRESION
Rule 31    EXPRESION -> EXPRESION divid EXPRESION
Rule 32    EXPRESION -> menos EXPRESION
Rule 33    EXPRESION -> pariz EXPRESION parder
Rule 34    EXPRESION -> entero
Rule 35    EXPRESION -> decimal
Rule 36    EXPRESION -> cadena
Rule 37    EXPRESION -> caracter
Rule 38    EXPRESION -> id
Rule 39    EXPRESION -> restrue
Rule 40    EXPRESION -> resfalse

Terminals, with rules where they appear

cadena               : 36
caracter             : 37
com                  : 10 19
decimal              : 35
divid                : 31
dospunt              : 11 13
entero               : 34
error                : 
id                   : 11 12 13 14 15 16 17 38
igual                : 11 12 13 14 15
llaveder             : 16
llaveiz              : 16
mas                  : 27
mayorque             : 
menorque             : 
menos                : 28 32
modulo               : 30
not                  : 9 10
parder               : 9 10 16 17 33
pariz                : 9 10 16 17 33
por                  : 29
puntycom             : 4 5 6 8
resStr               : 26
resString            : 25
resbool              : 23
reschar              : 24
resf64               : 22
resfalse             : 40
resfn                : 16
resi64               : 21
reslet               : 11 12 13 14
resmut               : 11 12
resprint             : 9 10
resstruct            : 
restrue              : 39

Nonterminals, with rules where they appear

ASIGNAR              : 6
BLOQUE               : 16
DECLARAR             : 5
EXPRESION            : 9 10 11 12 13 14 15 19 20 27 27 28 28 29 29 30 30 31 31 32 33
INIT                 : 0
INSTFUNC             : 7
INSTRUCCION          : 2 3
INSTRUCCIONES        : 1 2 18
LISTAEXP             : 10 19
LLAMARFUNC           : 8
PRINT                : 4
TIPOVAL              : 11 13

Parsing method: LALR

state 0

    (0) S' -> . INIT
    (1) INIT -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . PRINT puntycom
    (5) INSTRUCCION -> . DECLARAR puntycom
    (6) INSTRUCCION -> . ASIGNAR puntycom
    (7) INSTRUCCION -> . INSTFUNC
    (8) INSTRUCCION -> . LLAMARFUNC puntycom
    (9) PRINT -> . resprint not pariz EXPRESION parder
    (10) PRINT -> . resprint not pariz EXPRESION com LISTAEXP parder
    (11) DECLARAR -> . reslet resmut id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> . reslet resmut id igual EXPRESION
    (13) DECLARAR -> . reslet id dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> . reslet id igual EXPRESION
    (15) ASIGNAR -> . id igual EXPRESION
    (16) INSTFUNC -> . resfn id pariz parder llaveiz BLOQUE llaveder
    (17) LLAMARFUNC -> . id pariz parder

    resprint        shift and go to state 9
    reslet          shift and go to state 10
    id              shift and go to state 11
    resfn           shift and go to state 12

    INIT                           shift and go to state 1
    INSTRUCCIONES                  shift and go to state 2
    INSTRUCCION                    shift and go to state 3
    PRINT                          shift and go to state 4
    DECLARAR                       shift and go to state 5
    ASIGNAR                        shift and go to state 6
    INSTFUNC                       shift and go to state 7
    LLAMARFUNC                     shift and go to state 8

state 1

    (0) S' -> INIT .



state 2

    (1) INIT -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . PRINT puntycom
    (5) INSTRUCCION -> . DECLARAR puntycom
    (6) INSTRUCCION -> . ASIGNAR puntycom
    (7) INSTRUCCION -> . INSTFUNC
    (8) INSTRUCCION -> . LLAMARFUNC puntycom
    (9) PRINT -> . resprint not pariz EXPRESION parder
    (10) PRINT -> . resprint not pariz EXPRESION com LISTAEXP parder
    (11) DECLARAR -> . reslet resmut id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> . reslet resmut id igual EXPRESION
    (13) DECLARAR -> . reslet id dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> . reslet id igual EXPRESION
    (15) ASIGNAR -> . id igual EXPRESION
    (16) INSTFUNC -> . resfn id pariz parder llaveiz BLOQUE llaveder
    (17) LLAMARFUNC -> . id pariz parder

    $end            reduce using rule 1 (INIT -> INSTRUCCIONES .)
    resprint        shift and go to state 9
    reslet          shift and go to state 10
    id              shift and go to state 11
    resfn           shift and go to state 12

    INSTRUCCION                    shift and go to state 13
    PRINT                          shift and go to state 4
    DECLARAR                       shift and go to state 5
    ASIGNAR                        shift and go to state 6
    INSTFUNC                       shift and go to state 7
    LLAMARFUNC                     shift and go to state 8

state 3

    (3) INSTRUCCIONES -> INSTRUCCION .

    resprint        reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    reslet          reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    id              reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    resfn           reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    $end            reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)
    llaveder        reduce using rule 3 (INSTRUCCIONES -> INSTRUCCION .)


state 4

    (4) INSTRUCCION -> PRINT . puntycom

    puntycom        shift and go to state 14


state 5

    (5) INSTRUCCION -> DECLARAR . puntycom

    puntycom        shift and go to state 15


state 6

    (6) INSTRUCCION -> ASIGNAR . puntycom

    puntycom        shift and go to state 16


state 7

    (7) INSTRUCCION -> INSTFUNC .

    resprint        reduce using rule 7 (INSTRUCCION -> INSTFUNC .)
    reslet          reduce using rule 7 (INSTRUCCION -> INSTFUNC .)
    id              reduce using rule 7 (INSTRUCCION -> INSTFUNC .)
    resfn           reduce using rule 7 (INSTRUCCION -> INSTFUNC .)
    $end            reduce using rule 7 (INSTRUCCION -> INSTFUNC .)
    llaveder        reduce using rule 7 (INSTRUCCION -> INSTFUNC .)


state 8

    (8) INSTRUCCION -> LLAMARFUNC . puntycom

    puntycom        shift and go to state 17


state 9

    (9) PRINT -> resprint . not pariz EXPRESION parder
    (10) PRINT -> resprint . not pariz EXPRESION com LISTAEXP parder

    not             shift and go to state 18


state 10

    (11) DECLARAR -> reslet . resmut id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> reslet . resmut id igual EXPRESION
    (13) DECLARAR -> reslet . id dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> reslet . id igual EXPRESION

    resmut          shift and go to state 19
    id              shift and go to state 20


state 11

    (15) ASIGNAR -> id . igual EXPRESION
    (17) LLAMARFUNC -> id . pariz parder

    igual           shift and go to state 21
    pariz           shift and go to state 22


state 12

    (16) INSTFUNC -> resfn . id pariz parder llaveiz BLOQUE llaveder

    id              shift and go to state 23


state 13

    (2) INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .

    resprint        reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    reslet          reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    id              reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    resfn           reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    $end            reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)
    llaveder        reduce using rule 2 (INSTRUCCIONES -> INSTRUCCIONES INSTRUCCION .)


state 14

    (4) INSTRUCCION -> PRINT puntycom .

    resprint        reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)
    reslet          reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)
    id              reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)
    resfn           reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)
    $end            reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)
    llaveder        reduce using rule 4 (INSTRUCCION -> PRINT puntycom .)


state 15

    (5) INSTRUCCION -> DECLARAR puntycom .

    resprint        reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)
    reslet          reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)
    id              reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)
    resfn           reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)
    $end            reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)
    llaveder        reduce using rule 5 (INSTRUCCION -> DECLARAR puntycom .)


state 16

    (6) INSTRUCCION -> ASIGNAR puntycom .

    resprint        reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)
    reslet          reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)
    id              reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)
    resfn           reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)
    $end            reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)
    llaveder        reduce using rule 6 (INSTRUCCION -> ASIGNAR puntycom .)


state 17

    (8) INSTRUCCION -> LLAMARFUNC puntycom .

    resprint        reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)
    reslet          reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)
    id              reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)
    resfn           reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)
    $end            reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)
    llaveder        reduce using rule 8 (INSTRUCCION -> LLAMARFUNC puntycom .)


state 18

    (9) PRINT -> resprint not . pariz EXPRESION parder
    (10) PRINT -> resprint not . pariz EXPRESION com LISTAEXP parder

    pariz           shift and go to state 24


state 19

    (11) DECLARAR -> reslet resmut . id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> reslet resmut . id igual EXPRESION

    id              shift and go to state 25


state 20

    (13) DECLARAR -> reslet id . dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> reslet id . igual EXPRESION

    dospunt         shift and go to state 26
    igual           shift and go to state 27


state 21

    (15) ASIGNAR -> id igual . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 29

state 22

    (17) LLAMARFUNC -> id pariz . parder

    parder          shift and go to state 38


state 23

    (16) INSTFUNC -> resfn id . pariz parder llaveiz BLOQUE llaveder

    pariz           shift and go to state 39


state 24

    (9) PRINT -> resprint not pariz . EXPRESION parder
    (10) PRINT -> resprint not pariz . EXPRESION com LISTAEXP parder
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 40

state 25

    (11) DECLARAR -> reslet resmut id . dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> reslet resmut id . igual EXPRESION

    dospunt         shift and go to state 41
    igual           shift and go to state 42


state 26

    (13) DECLARAR -> reslet id dospunt . TIPOVAL igual EXPRESION
    (21) TIPOVAL -> . resi64
    (22) TIPOVAL -> . resf64
    (23) TIPOVAL -> . resbool
    (24) TIPOVAL -> . reschar
    (25) TIPOVAL -> . resString
    (26) TIPOVAL -> . resStr

    resi64          shift and go to state 44
    resf64          shift and go to state 45
    resbool         shift and go to state 46
    reschar         shift and go to state 47
    resString       shift and go to state 48
    resStr          shift and go to state 49

    TIPOVAL                        shift and go to state 43

state 27

    (14) DECLARAR -> reslet id igual . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 50

state 28

    (38) EXPRESION -> id .

    mas             reduce using rule 38 (EXPRESION -> id .)
    menos           reduce using rule 38 (EXPRESION -> id .)
    por             reduce using rule 38 (EXPRESION -> id .)
    modulo          reduce using rule 38 (EXPRESION -> id .)
    divid           reduce using rule 38 (EXPRESION -> id .)
    puntycom        reduce using rule 38 (EXPRESION -> id .)
    parder          reduce using rule 38 (EXPRESION -> id .)
    com             reduce using rule 38 (EXPRESION -> id .)


state 29

    (15) ASIGNAR -> id igual EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    puntycom        reduce using rule 15 (ASIGNAR -> id igual EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 30

    (32) EXPRESION -> menos . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 56

state 31

    (33) EXPRESION -> pariz . EXPRESION parder
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 57

state 32

    (34) EXPRESION -> entero .

    mas             reduce using rule 34 (EXPRESION -> entero .)
    menos           reduce using rule 34 (EXPRESION -> entero .)
    por             reduce using rule 34 (EXPRESION -> entero .)
    modulo          reduce using rule 34 (EXPRESION -> entero .)
    divid           reduce using rule 34 (EXPRESION -> entero .)
    puntycom        reduce using rule 34 (EXPRESION -> entero .)
    parder          reduce using rule 34 (EXPRESION -> entero .)
    com             reduce using rule 34 (EXPRESION -> entero .)


state 33

    (35) EXPRESION -> decimal .

    mas             reduce using rule 35 (EXPRESION -> decimal .)
    menos           reduce using rule 35 (EXPRESION -> decimal .)
    por             reduce using rule 35 (EXPRESION -> decimal .)
    modulo          reduce using rule 35 (EXPRESION -> decimal .)
    divid           reduce using rule 35 (EXPRESION -> decimal .)
    puntycom        reduce using rule 35 (EXPRESION -> decimal .)
    parder          reduce using rule 35 (EXPRESION -> decimal .)
    com             reduce using rule 35 (EXPRESION -> decimal .)


state 34

    (36) EXPRESION -> cadena .

    mas             reduce using rule 36 (EXPRESION -> cadena .)
    menos           reduce using rule 36 (EXPRESION -> cadena .)
    por             reduce using rule 36 (EXPRESION -> cadena .)
    modulo          reduce using rule 36 (EXPRESION -> cadena .)
    divid           reduce using rule 36 (EXPRESION -> cadena .)
    puntycom        reduce using rule 36 (EXPRESION -> cadena .)
    parder          reduce using rule 36 (EXPRESION -> cadena .)
    com             reduce using rule 36 (EXPRESION -> cadena .)


state 35

    (37) EXPRESION -> caracter .

    mas             reduce using rule 37 (EXPRESION -> caracter .)
    menos           reduce using rule 37 (EXPRESION -> caracter .)
    por             reduce using rule 37 (EXPRESION -> caracter .)
    modulo          reduce using rule 37 (EXPRESION -> caracter .)
    divid           reduce using rule 37 (EXPRESION -> caracter .)
    puntycom        reduce using rule 37 (EXPRESION -> caracter .)
    parder          reduce using rule 37 (EXPRESION -> caracter .)
    com             reduce using rule 37 (EXPRESION -> caracter .)


state 36

    (39) EXPRESION -> restrue .

    mas             reduce using rule 39 (EXPRESION -> restrue .)
    menos           reduce using rule 39 (EXPRESION -> restrue .)
    por             reduce using rule 39 (EXPRESION -> restrue .)
    modulo          reduce using rule 39 (EXPRESION -> restrue .)
    divid           reduce using rule 39 (EXPRESION -> restrue .)
    puntycom        reduce using rule 39 (EXPRESION -> restrue .)
    parder          reduce using rule 39 (EXPRESION -> restrue .)
    com             reduce using rule 39 (EXPRESION -> restrue .)


state 37

    (40) EXPRESION -> resfalse .

    mas             reduce using rule 40 (EXPRESION -> resfalse .)
    menos           reduce using rule 40 (EXPRESION -> resfalse .)
    por             reduce using rule 40 (EXPRESION -> resfalse .)
    modulo          reduce using rule 40 (EXPRESION -> resfalse .)
    divid           reduce using rule 40 (EXPRESION -> resfalse .)
    puntycom        reduce using rule 40 (EXPRESION -> resfalse .)
    parder          reduce using rule 40 (EXPRESION -> resfalse .)
    com             reduce using rule 40 (EXPRESION -> resfalse .)


state 38

    (17) LLAMARFUNC -> id pariz parder .

    puntycom        reduce using rule 17 (LLAMARFUNC -> id pariz parder .)


state 39

    (16) INSTFUNC -> resfn id pariz . parder llaveiz BLOQUE llaveder

    parder          shift and go to state 58


state 40

    (9) PRINT -> resprint not pariz EXPRESION . parder
    (10) PRINT -> resprint not pariz EXPRESION . com LISTAEXP parder
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    parder          shift and go to state 59
    com             shift and go to state 60
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 41

    (11) DECLARAR -> reslet resmut id dospunt . TIPOVAL igual EXPRESION
    (21) TIPOVAL -> . resi64
    (22) TIPOVAL -> . resf64
    (23) TIPOVAL -> . resbool
    (24) TIPOVAL -> . reschar
    (25) TIPOVAL -> . resString
    (26) TIPOVAL -> . resStr

    resi64          shift and go to state 44
    resf64          shift and go to state 45
    resbool         shift and go to state 46
    reschar         shift and go to state 47
    resString       shift and go to state 48
    resStr          shift and go to state 49

    TIPOVAL                        shift and go to state 61

state 42

    (12) DECLARAR -> reslet resmut id igual . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 62

state 43

    (13) DECLARAR -> reslet id dospunt TIPOVAL . igual EXPRESION

    igual           shift and go to state 63


state 44

    (21) TIPOVAL -> resi64 .

    igual           reduce using rule 21 (TIPOVAL -> resi64 .)


state 45

    (22) TIPOVAL -> resf64 .

    igual           reduce using rule 22 (TIPOVAL -> resf64 .)


state 46

    (23) TIPOVAL -> resbool .

    igual           reduce using rule 23 (TIPOVAL -> resbool .)


state 47

    (24) TIPOVAL -> reschar .

    igual           reduce using rule 24 (TIPOVAL -> reschar .)


state 48

    (25) TIPOVAL -> resString .

    igual           reduce using rule 25 (TIPOVAL -> resString .)


state 49

    (26) TIPOVAL -> resStr .

    igual           reduce using rule 26 (TIPOVAL -> resStr .)


state 50

    (14) DECLARAR -> reslet id igual EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    puntycom        reduce using rule 14 (DECLARAR -> reslet id igual EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 51

    (27) EXPRESION -> EXPRESION mas . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 64

state 52

    (28) EXPRESION -> EXPRESION menos . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 65

state 53

    (29) EXPRESION -> EXPRESION por . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 66

state 54

    (30) EXPRESION -> EXPRESION modulo . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 67

state 55

    (31) EXPRESION -> EXPRESION divid . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 68

state 56

    (32) EXPRESION -> menos EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    menos           reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    por             reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    modulo          reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    divid           reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    puntycom        reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    parder          reduce using rule 32 (EXPRESION -> menos EXPRESION .)
    com             reduce using rule 32 (EXPRESION -> menos EXPRESION .)

  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]
  ! por             [ shift and go to state 53 ]
  ! modulo          [ shift and go to state 54 ]
  ! divid           [ shift and go to state 55 ]


state 57

    (33) EXPRESION -> pariz EXPRESION . parder
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    parder          shift and go to state 69
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 58

    (16) INSTFUNC -> resfn id pariz parder . llaveiz BLOQUE llaveder

    llaveiz         shift and go to state 70


state 59

    (9) PRINT -> resprint not pariz EXPRESION parder .

    puntycom        reduce using rule 9 (PRINT -> resprint not pariz EXPRESION parder .)


state 60

    (10) PRINT -> resprint not pariz EXPRESION com . LISTAEXP parder
    (19) LISTAEXP -> . LISTAEXP com EXPRESION
    (20) LISTAEXP -> . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 71
    LISTAEXP                       shift and go to state 72

state 61

    (11) DECLARAR -> reslet resmut id dospunt TIPOVAL . igual EXPRESION

    igual           shift and go to state 73


state 62

    (12) DECLARAR -> reslet resmut id igual EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    puntycom        reduce using rule 12 (DECLARAR -> reslet resmut id igual EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 63

    (13) DECLARAR -> reslet id dospunt TIPOVAL igual . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 74

state 64

    (27) EXPRESION -> EXPRESION mas EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .)
    menos           reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .)
    puntycom        reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .)
    parder          reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .)
    com             reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .)
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55

  ! por             [ reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! modulo          [ reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! divid           [ reduce using rule 27 (EXPRESION -> EXPRESION mas EXPRESION .) ]
  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]


state 65

    (28) EXPRESION -> EXPRESION menos EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .)
    menos           reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .)
    puntycom        reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .)
    parder          reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .)
    com             reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .)
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55

  ! por             [ reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! modulo          [ reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! divid           [ reduce using rule 28 (EXPRESION -> EXPRESION menos EXPRESION .) ]
  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]


state 66

    (29) EXPRESION -> EXPRESION por EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    menos           reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    por             reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    modulo          reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    divid           reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    puntycom        reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    parder          reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)
    com             reduce using rule 29 (EXPRESION -> EXPRESION por EXPRESION .)

  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]
  ! por             [ shift and go to state 53 ]
  ! modulo          [ shift and go to state 54 ]
  ! divid           [ shift and go to state 55 ]


state 67

    (30) EXPRESION -> EXPRESION modulo EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    menos           reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    por             reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    modulo          reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    divid           reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    puntycom        reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    parder          reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)
    com             reduce using rule 30 (EXPRESION -> EXPRESION modulo EXPRESION .)

  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]
  ! por             [ shift and go to state 53 ]
  ! modulo          [ shift and go to state 54 ]
  ! divid           [ shift and go to state 55 ]


state 68

    (31) EXPRESION -> EXPRESION divid EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    mas             reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    menos           reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    por             reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    modulo          reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    divid           reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    puntycom        reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    parder          reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)
    com             reduce using rule 31 (EXPRESION -> EXPRESION divid EXPRESION .)

  ! mas             [ shift and go to state 51 ]
  ! menos           [ shift and go to state 52 ]
  ! por             [ shift and go to state 53 ]
  ! modulo          [ shift and go to state 54 ]
  ! divid           [ shift and go to state 55 ]


state 69

    (33) EXPRESION -> pariz EXPRESION parder .

    mas             reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    menos           reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    por             reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    modulo          reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    divid           reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    puntycom        reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    parder          reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)
    com             reduce using rule 33 (EXPRESION -> pariz EXPRESION parder .)


state 70

    (16) INSTFUNC -> resfn id pariz parder llaveiz . BLOQUE llaveder
    (18) BLOQUE -> . INSTRUCCIONES
    (2) INSTRUCCIONES -> . INSTRUCCIONES INSTRUCCION
    (3) INSTRUCCIONES -> . INSTRUCCION
    (4) INSTRUCCION -> . PRINT puntycom
    (5) INSTRUCCION -> . DECLARAR puntycom
    (6) INSTRUCCION -> . ASIGNAR puntycom
    (7) INSTRUCCION -> . INSTFUNC
    (8) INSTRUCCION -> . LLAMARFUNC puntycom
    (9) PRINT -> . resprint not pariz EXPRESION parder
    (10) PRINT -> . resprint not pariz EXPRESION com LISTAEXP parder
    (11) DECLARAR -> . reslet resmut id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> . reslet resmut id igual EXPRESION
    (13) DECLARAR -> . reslet id dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> . reslet id igual EXPRESION
    (15) ASIGNAR -> . id igual EXPRESION
    (16) INSTFUNC -> . resfn id pariz parder llaveiz BLOQUE llaveder
    (17) LLAMARFUNC -> . id pariz parder

    resprint        shift and go to state 9
    reslet          shift and go to state 10
    id              shift and go to state 11
    resfn           shift and go to state 12

    BLOQUE                         shift and go to state 75
    INSTRUCCIONES                  shift and go to state 76
    INSTRUCCION                    shift and go to state 3
    PRINT                          shift and go to state 4
    DECLARAR                       shift and go to state 5
    ASIGNAR                        shift and go to state 6
    INSTFUNC                       shift and go to state 7
    LLAMARFUNC                     shift and go to state 8

state 71

    (20) LISTAEXP -> EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    parder          reduce using rule 20 (LISTAEXP -> EXPRESION .)
    com             reduce using rule 20 (LISTAEXP -> EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 72

    (10) PRINT -> resprint not pariz EXPRESION com LISTAEXP . parder
    (19) LISTAEXP -> LISTAEXP . com EXPRESION

    parder          shift and go to state 78
    com             shift and go to state 77


state 73

    (11) DECLARAR -> reslet resmut id dospunt TIPOVAL igual . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 79

state 74

    (13) DECLARAR -> reslet id dospunt TIPOVAL igual EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    puntycom        reduce using rule 13 (DECLARAR -> reslet id dospunt TIPOVAL igual EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 75

    (16) INSTFUNC -> resfn id pariz parder llaveiz BLOQUE . llaveder

    llaveder        shift and go to state 80


state 76

    (18) BLOQUE -> INSTRUCCIONES .
    (2) INSTRUCCIONES -> INSTRUCCIONES . INSTRUCCION
    (4) INSTRUCCION -> . PRINT puntycom
    (5) INSTRUCCION -> . DECLARAR puntycom
    (6) INSTRUCCION -> . ASIGNAR puntycom
    (7) INSTRUCCION -> . INSTFUNC
    (8) INSTRUCCION -> . LLAMARFUNC puntycom
    (9) PRINT -> . resprint not pariz EXPRESION parder
    (10) PRINT -> . resprint not pariz EXPRESION com LISTAEXP parder
    (11) DECLARAR -> . reslet resmut id dospunt TIPOVAL igual EXPRESION
    (12) DECLARAR -> . reslet resmut id igual EXPRESION
    (13) DECLARAR -> . reslet id dospunt TIPOVAL igual EXPRESION
    (14) DECLARAR -> . reslet id igual EXPRESION
    (15) ASIGNAR -> . id igual EXPRESION
    (16) INSTFUNC -> . resfn id pariz parder llaveiz BLOQUE llaveder
    (17) LLAMARFUNC -> . id pariz parder

    llaveder        reduce using rule 18 (BLOQUE -> INSTRUCCIONES .)
    resprint        shift and go to state 9
    reslet          shift and go to state 10
    id              shift and go to state 11
    resfn           shift and go to state 12

    INSTRUCCION                    shift and go to state 13
    PRINT                          shift and go to state 4
    DECLARAR                       shift and go to state 5
    ASIGNAR                        shift and go to state 6
    INSTFUNC                       shift and go to state 7
    LLAMARFUNC                     shift and go to state 8

state 77

    (19) LISTAEXP -> LISTAEXP com . EXPRESION
    (27) EXPRESION -> . EXPRESION mas EXPRESION
    (28) EXPRESION -> . EXPRESION menos EXPRESION
    (29) EXPRESION -> . EXPRESION por EXPRESION
    (30) EXPRESION -> . EXPRESION modulo EXPRESION
    (31) EXPRESION -> . EXPRESION divid EXPRESION
    (32) EXPRESION -> . menos EXPRESION
    (33) EXPRESION -> . pariz EXPRESION parder
    (34) EXPRESION -> . entero
    (35) EXPRESION -> . decimal
    (36) EXPRESION -> . cadena
    (37) EXPRESION -> . caracter
    (38) EXPRESION -> . id
    (39) EXPRESION -> . restrue
    (40) EXPRESION -> . resfalse

    menos           shift and go to state 30
    pariz           shift and go to state 31
    entero          shift and go to state 32
    decimal         shift and go to state 33
    cadena          shift and go to state 34
    caracter        shift and go to state 35
    id              shift and go to state 28
    restrue         shift and go to state 36
    resfalse        shift and go to state 37

    EXPRESION                      shift and go to state 81

state 78

    (10) PRINT -> resprint not pariz EXPRESION com LISTAEXP parder .

    puntycom        reduce using rule 10 (PRINT -> resprint not pariz EXPRESION com LISTAEXP parder .)


state 79

    (11) DECLARAR -> reslet resmut id dospunt TIPOVAL igual EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    puntycom        reduce using rule 11 (DECLARAR -> reslet resmut id dospunt TIPOVAL igual EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55


state 80

    (16) INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .

    resprint        reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)
    reslet          reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)
    id              reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)
    resfn           reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)
    $end            reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)
    llaveder        reduce using rule 16 (INSTFUNC -> resfn id pariz parder llaveiz BLOQUE llaveder .)


state 81

    (19) LISTAEXP -> LISTAEXP com EXPRESION .
    (27) EXPRESION -> EXPRESION . mas EXPRESION
    (28) EXPRESION -> EXPRESION . menos EXPRESION
    (29) EXPRESION -> EXPRESION . por EXPRESION
    (30) EXPRESION -> EXPRESION . modulo EXPRESION
    (31) EXPRESION -> EXPRESION . divid EXPRESION

    parder          reduce using rule 19 (LISTAEXP -> LISTAEXP com EXPRESION .)
    com             reduce using rule 19 (LISTAEXP -> LISTAEXP com EXPRESION .)
    mas             shift and go to state 51
    menos           shift and go to state 52
    por             shift and go to state 53
    modulo          shift and go to state 54
    divid           shift and go to state 55

